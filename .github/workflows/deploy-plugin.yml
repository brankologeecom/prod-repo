name: Deploy plugin

on:
  workflow_dispatch:
    inputs:
      deployment:
        description: "Deploy?"
        required: true
        default: "✅"
        type: choice
        options:
          - ✅
          - ❌
      deploy-to:
        description: "A comma-separated list of instances"
        required: false
        default: "latest"

jobs:
  push-to-production-repository:
    name: Push
    runs-on: ubuntu-latest
    steps:
      - name: Print deploy status
        run: echo "Pushing to the production repository"

  deploy:
    name: Deployment
    runs-on: ubuntu-latest
    env:
      CLUSTER: apps-prestashop-wld-integrations-click-Cluster
    if: ${{ inputs.deployment == '✅' }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.CDK_DEFAULT_REGION }}
      - name: Install expect (for unbuffer)
        shell: bash
        run: |
          sudo apt-get update -y
          sudo apt-get install -y expect
      - name: Install session-manager-plugin (required for ECS Exec)
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v session-manager-plugin >/dev/null 2>&1; then
            curl -sL "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o /tmp/ssm-plugin.deb
            sudo dpkg -i /tmp/ssm-plugin.deb
          fi
          session-manager-plugin -version

      - name: Find first service and running task
        id: pick
        shell: bash
        run: |
          set -euo pipefail
          echo "🔎 Cluster: $CLUSTER"
          
          SERVICE_ARN=$(aws ecs list-services \
            --cluster "$CLUSTER" \
            --max-items 1 \
            --query 'serviceArns[0]' \
            --output text)
          if [[ -z "$SERVICE_ARN" || "$SERVICE_ARN" == "None" ]]; then
            echo "No services found in cluster: $CLUSTER"; exit 1
          fi
          SERVICE_NAME="${SERVICE_ARN##*/}"
          echo "✅ Service: $SERVICE_NAME"
          
          TASK_ARN=$(aws ecs list-tasks \
            --cluster "$CLUSTER" \
            --service-name "$SERVICE_NAME" \
            --desired-status RUNNING \
            --max-items 1 \
            --query 'taskArns[0]' \
            --output text)
          if [[ -z "$TASK_ARN" || "$TASK_ARN" == "None" ]]; then
            TASK_ARN=$(aws ecs list-tasks \
              --cluster "$CLUSTER" \
              --service-name "$SERVICE_NAME" \
              --max-items 1 \
              --query 'taskArns[0]' \
              --output text)
          fi
          if [[ -z "$TASK_ARN" || "$TASK_ARN" == "None" ]]; then
            echo "No tasks found for service: $SERVICE_NAME"; exit 1
          fi
          TASK_ID="${TASK_ARN##*/}"
          echo "✅ Task: $TASK_ID"
          
          CONTAINER_NAME=$(aws ecs describe-tasks \
            --cluster "$CLUSTER" \
            --tasks "$TASK_ID" \
            --query 'tasks[0].containers[0].name' \
            --output text)
          if [[ -z "$CONTAINER_NAME" || "$CONTAINER_NAME" == "None" ]]; then
            echo "Could not determine container name for task: $TASK_ID"; exit 1
          fi
          echo "📦 Container: $CONTAINER_NAME"
          
          {
            echo "service_name=$SERVICE_NAME"
            echo "task_id=$TASK_ID"
            echo "container_name=$CONTAINER_NAME"
          } >> "$GITHUB_OUTPUT"

      - name: Execute echo inside ECS task
        run: |
          echo "🚀 Executing inside task: ${{ steps.pick.outputs.task_id }} (container: ${{ steps.pick.outputs.container_name }})"
          unbuffer aws ecs execute-command \
          --cluster "$CLUSTER" \
          --task "${{ steps.pick.outputs.task_id }}" \
          --container "${{ steps.pick.outputs.container_name }}" \
          --interactive \
          --command "/bin/bash /var/www/public/update.sh ${{ inputs['deploy-to'] }}"
